package br.com.gustavomp.ms.model.entities;

import java.util.ArrayList;
import java.util.List;

public class Board {
	private int lines;
	private int columns;
	private int mines;
	
	private List<Field> fields = new ArrayList<Field>();
	
	public Board(int lines, int columns, int mines) {
		this.lines = lines;
		this.columns = columns;
		this.mines = mines;
		
		createFields();
		associateFields();
		putMines();
	}

	public int getLines() {
		return lines;
	}

	public int getColumns() {
		return columns;
	}

	public int getMines() {
		return mines;
	}

	public List<Field> getFields() {
		return fields;
	}
	
	private void createFields() {
		for(int i = 0; i < getLines(); i++) {
			for(int j = 0; j < getColumns(); j++) {
				getFields().add(new Field(i, j));
			}
		}
	}
	
	
	private void associateFields() {
		for(Field f1 : getFields()) {
			for(Field f2 : getFields()) {
				f1.addNeighbor(f2);
			}
		}
	}
	
	private void putMines() {
		int minesPuted = 0;
		while(minesPuted < getMines()) {
			int r1 = (int) (Math.random() * getLines());
			int r2 = (int) (Math.random() * getColumns());
			
			Field ft = getFields().stream()
					.filter(f -> f.getLine() == r1 && f.getColumn() == r2)
					.findFirst().get();
			
			if(!ft.isMined()) {
				ft.putMine();
				minesPuted++;
			}
		}
	}
	
	public boolean targetComplete() {
		return getFields().stream().allMatch(f -> f.fieldComplete());
	}
	
	private void restart() {
		getFields().forEach(f -> f.reset());
		
		putMines();
	}
	
	public void open(int line, int column) {
		getFields().parallelStream()
		.filter(f -> f.getLine() == line && f.getColumn() == column)
		.findFirst().ifPresent(f -> f.open());
	}
	
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < getLines(); i++) {
			for(int j = 0; j < getColumns(); j++) {
				sb.append(" ");
				sb.append(getFields().get(i * getLines() + j).toString());
				sb.append(" ");
			}
			
			sb.append("\n");
		}
		
		return sb.toString();
	}
}
